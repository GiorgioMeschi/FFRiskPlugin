# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RiskPlugin
                                 A QGIS plugin
 Forest Fire Risk analysis using Random Forest Algorith
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-04
        copyright            : (C) 2022 by CIMA Research Foundation
        email                : giorgio.meschi@cimafoundation.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CIMA Research Foundation'
__date__ = '2022-01-04'
__copyright__ = '(C) 2022 by CIMA Research Foundation'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from time import sleep

import numpy as np
import processing
from osgeo import gdal
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRange,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameters, QgsProcessingParameterString,
                       QgsProcessingParameterMultipleLayers,
                       QgsProject, QgsRasterLayer, QgsVectorLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterEnum,
                       QgsProcessingContext,
                       QgsFeatureRequest, QgsFeature,
                       QgsGeometry, QgsVectorLayer, QgsField, QgsPointXY,
                       QgsWkbTypes, QgsVectorFileWriter,
                       QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsProcessingUtils, QgsProcessingParameterField,
                       QgsProcessingParameterNumber, QgsProcessingParameterMatrix)


from qgis.PyQt.QtCore import QCoreApplication
from PyQt5.QtCore import QVariant, QTemporaryFile

try:
    from scipy import signal
except ModuleNotFoundError:
    import pip
    pip.main(['install', 'scipy'])
    from scipy import signal




from .helpers import ProcessingHelper
from .processing_layer_risk import PreprocessingRiskInputs



INPUT_DEM = 'INPUT_DEM'
INPUT_VEG = 'INPUT_VEG'
INPUT_VEG_S = 'INPUT_VEG_S'
FIELD_LC = 'FIELD_LC'
FUEL_MODEL_CODE = 'FUEL_MODEL_CODE'
INPUT_POI = 'INPUT_POI'
INPUT_ROADS = 'INPUT_ROADS'
# URB_CODES = 'URB_CODES'

FIELD_POI = 'FIELD_POI'
FIELD_ROADS = 'FIELD_ROADS'
FIELD_VEG = 'FIELD_VEG'

INPUT_TABLE = 'ATTRS'
INPUT_TABLE_ROADS = 'INPUT_TABLE_ROADS'
INPUT_TABLE_VEG = 'INPUT_TABLE_VEG'


OUT_SHPS = ['OUT_SHP0', 'OUT_SHP1', 'OUT_SHP2', 'OUT_SHP3', 'OUT_SHP4']
OUT_SHPS_R = ['LINEAR0', 'LINEAR1', 'LINEAR2']
# OUT_RAS = 'OUT_RAS'

#%%

class PreProcessingAlgorithm(QgsProcessingAlgorithm):
    """
    It evalautes Wildifre susceptibility, intensity and hazard map at national/regional scale.
    Then it evaluates the Risk combining exposed elements' potential degree of damages with hazards
    """


    def __get_default_value(self, substr):
        try:  # first layer name containing "dem"
            defaultValue = [
                layer.name()
                for layer in QgsProject.instance().mapLayers().values()
                if substr.lower() in layer.name().lower()
            ][0]
            return defaultValue
        except IndexError:
            return None


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.


        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_DEM,
                self.tr('Input layer (dem)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('dem'),
                optional = True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_VEG,
                self.tr('Input layer (veg raster)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine'),
                optional = True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_VEG_S,
                self.tr('Input layer (veg shapefile)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine'),
                optional = True,

            )
        )

        
        self.addParameter(
            QgsProcessingParameterField(
                FIELD_LC,
                self.tr('name of field for rasterizing LC layer'),
                'code_18',
                INPUT_VEG_S,
                optional = True,
            )
        )
        


        self.addParameter(
             QgsProcessingParameterFeatureSource(
                FUEL_MODEL_CODE,
                self.tr('excel file - vegetation class to fuel models'),
                defaultValue = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Excel_input_data', 'VEG_to_FUEL_TYPE.xlsx'),
                optional = True
                ))
                
        
                
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_POI,
                self.tr('Input layer - POI'),
                # defaultValue = r"C:\Users\Giorg\CIMA Dropbox\Giorgio Meschi\CIMA\progetti\IPA_FF_balcani\DATI\[2]_Assets\assets_bosnia\dati_osm\gis_osm_pois_a_free_1.shp",
                optional = True
            )
        )
        
        self.addParameter(
            QgsProcessingParameterField(
                FIELD_POI,
                self.tr('name of field of POI layer'),
                'fclass',
                INPUT_POI,
                optional = True
            )
        )
      

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_ROADS,
                self.tr('Input layer - ROADS'),
                # defaultValue = r"C:\Users\Giorg\CIMA Dropbox\Giorgio Meschi\CIMA\progetti\IPA_FF_balcani\DATI\[2]_Assets\assets_bosnia\dati_osm\gis_osm_roads_free_1.shp",
                optional = True
            )
        )
        
        self.addParameter(
            QgsProcessingParameterField(
                FIELD_ROADS,
                self.tr('name of field of roads layer'),
                'fclass',
                INPUT_ROADS,
                optional = True
            )
        )

        self.addParameter(
              QgsProcessingParameterMatrix(
                INPUT_TABLE,
                self.tr('POI input table (MAX 5 ROWS)'),
                headers = ['element name', 'attributes - comma separated'],
                defaultValue = ['hostpitals', 'clinic,hospital,nursing_home',
                                'schools', 'college,kindergarten,library,school,university',
                                'hotels', 'hostel,hotel,motel',
                                'shelters', 'shelter,hunting_stand',
                                'other', 'graveyard,theatre,arts_centre,police,stadium,embassy,monument',
                                                            
                             ],
                ))
        
        self.addParameter(
              QgsProcessingParameterMatrix(
                INPUT_TABLE_ROADS,
                self.tr('ROADS input table (MAX 3 ROS)'),
                headers = ['element name', 'attributes - comma separated'],
                defaultValue = ['primary_roads', 'primary,motorway,trunk',
                               'secondary_roads', 'secondary',
                               'tertiary_roads', 'tertiary',
                    
                             ],
                ))
        
        
        # self.addParameter(
        #      QgsProcessingParameterString(
        #         URB_CODES,
        #         self.tr('Insert urban codes (comma separated list)'),
        #         defaultValue = '111,112,121,123,124,131,132,133,141,142',
        #         optional = True,
        #         ))
        
        
        for n in range(5):
            self.addParameter(
                QgsProcessingParameterFeatureSink(
                    OUT_SHPS[n],
                    self.tr(f'Output POI: {n}')
                )
            )

        for n in range(3):
            self.addParameter(
                QgsProcessingParameterFeatureSink(
                    OUT_SHPS_R[n],
                    self.tr(f'Output ROADS: {n}'),
                    # defaultValue = os.path.join(os.path.expanduser(r"~\Downloads\Layer_processed"), OUT_SHPS_R[n] + '.shp')
                )
            )

        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        # load processing functions
        helper = ProcessingHelper(context, feedback)
                    
        
        # load processing functions
        helper = ProcessingHelper(context, feedback)
        
        # dem raster file object
        dem = self.parameterAsRasterLayer(parameters, INPUT_DEM, context)  # this is a QgsRasterLayer object
        # open dem raster file using gdal
        dem_path = dem.dataProvider().dataSourceUri()
        dem_raster = gdal.Open(dem_path)
        # read file as array
        dem_arr = dem_raster.GetRasterBand(1).ReadAsArray()
        
        # create an output folder 
        _dirpath =  os.path.expanduser(r"~\Downloads\Layer_processed")
        if not os.path.exists(_dirpath):
            os.mkdir(_dirpath)
            
            
        missing_veg = False
        # vegetation shapefile or raster file
        veg_0 = self.parameterAsRasterLayer(parameters, INPUT_VEG, context)
        if veg_0 == None:
            veg_0 = self.parameterAsVectorLayer(parameters, INPUT_VEG_S, context) 
            if veg_0 is not None:
                field_lc = self.parameterAsFields(parameters, FIELD_LC, context)[0]
                veg_0_result = helper.rasterize_numerical_feature(veg_0, dem, column=field_lc, burn=0.0)
                veg_path, veg_raster, veg_arr = helper.read_arr_after_qgis_process(veg_0_result)
                nodata = veg_raster.GetRasterBand(1).GetNoDataValue()
                out = os.path.join(_dirpath, 'veg_arr')
                helper.save_temporary_array(veg_arr, dem, out) 
            else:
                print('vegetation layer is missing')
                missing_veg = True
                
        else:     
            vegr = helper.reproject_layer(veg_0, dem)
            veg_path, veg_raster, veg_arr = helper.read_arr_after_qgis_process(vegr)
            nodata = veg_raster.GetRasterBand(1).GetNoDataValue()

        
        crs = dem.crs().authid()
        print(crs)
        preprocess_exposure = PreprocessingRiskInputs(context, feedback, crs)
        
        name_field_poi = self.parameterAsFields(parameters, FIELD_POI, context)[0]
        exposed_table = self.parameterAsMatrix(parameters, INPUT_TABLE, context)
        poi_layer = self.parameterAsVectorLayer(parameters, INPUT_POI, context)
        out_file_list = [self.parameterAsOutputLayer(parameters, i, context) for i in OUT_SHPS]
        
        if exposed_table is not None:
            list_shp_paths, list_poi_names = preprocess_exposure.preprocessing_poi(poi_layer, exposed_table, name_field_poi, crs, dem, out_file_list)
        else:
            list_shp_paths, list_poi_names = [None], [None]
        
        
        # save filtered shapefiles automatically
        names = [i + '.shp' for i in list_poi_names]
        complete_out_paths = [os.path.join(_dirpath, i) for i in names ]
        
        for layer, path in zip(list_shp_paths, complete_out_paths):
            helper.save_shapefile(layer, path, crs)
        
        exposed_table_r = self.parameterAsMatrix(parameters, INPUT_TABLE_ROADS, context)
        roads_layer = self.parameterAsVectorLayer(parameters, INPUT_ROADS, context)
        out_file_list_r = [self.parameterAsOutputLayer(parameters, i, context) for i in OUT_SHPS_R]
        name_field_roads = self.parameterAsFields(parameters, FIELD_ROADS, context)[0]
        
        if exposed_table_r is not None:
            list_shp_paths_r, list_roads_names = preprocess_exposure.preprocessing_linear(roads_layer, exposed_table_r, name_field_roads, crs, dem, out_file_list_r)
        else:
            list_shp_paths_r, list_roads_names = [None], [None]    
            
        # save filtered shapefiles automatically
        names_r = [i + '.shp' for i in list_roads_names]
        complete_out_paths_r = [os.path.join(_dirpath, i) for i in names_r ]
        
        for layer, path in zip(list_shp_paths_r, complete_out_paths_r):
            helper.save_shapefile(layer, path, crs)
                
        path_excel_fuels = self.parameterAsString(parameters, FUEL_MODEL_CODE, context)
        if path_excel_fuels is not None:
            if missing_veg == False:
                fuel_codes = QgsVectorLayer(path_excel_fuels, 'fuel_models', 'ogr')
                fuel_model_arr = helper.veg_aggregation_str(fuel_codes, veg_arr) # risico veg
                print('processing fuels')
                # it saves a single array of fuel mdoel identified by the user
                preprocess_exposure.preprocessing_vegetation(fuel_model_arr, dem, _dirpath)  
        
        
        # urb_codes = self.parameterAsString(parameters, URB_CODES, context)
        # urb_codes_int = [int(i) for i in urb_codes.split(',')]
        
        # extract veg code not burnable 
        urb_codes_int = list()
        for feature in fuel_codes.getFeatures():
            if feature['is_urban'] == 'y':
                urb_codes_int.append(feature['veg'])
                
        urb_codes_int = [int(i) for i in urb_codes_int] 
        # urb_codes_int = [str(i) for i in urb_codes_int] 
        
        
        
        if missing_veg == False:
            interface = preprocess_exposure.evaluate_urban_interface(veg_arr, urb_codes_int)
            out_path_interface = os.path.join(_dirpath, 'urb_interface')
            helper.save_temporary_array(interface, dem, out_path_interface)        
        
                
        results = {}
        
        # associate output string with output path - until 5 
        dinamic_dict_poi = {f'OUT_SHP{i}': list_shp_paths[i] for i in range(len(list_shp_paths))}
        dinamic_dict_roads = {f'LINEAR{i}': list_shp_paths_r[i] for i in range(len(list_shp_paths_r))}
        
        
        results.update(dinamic_dict_poi)
        results.update(dinamic_dict_roads)
            
        print('done, check saved file')
        
        return results 
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'processing'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'BETA'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PreProcessingAlgorithm()
    
