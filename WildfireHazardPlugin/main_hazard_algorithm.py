# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RFForestFireRisk
                                 A QGIS plugin
 Forest Fire Risk analysis using Random Forest Algorith
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-04
        copyright            : (C) 2022 by CIMA Research Foundation
        email                : giorgio.meschi@cimafoundation.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CIMA Research Foundation'
__date__ = '2022-01-04'
__copyright__ = '(C) 2022 by CIMA Research Foundation'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from time import sleep

import numpy as np
import processing
from osgeo import gdal
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRange,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameters, QgsProcessingParameterString,
                       QgsProcessingParameterMultipleLayers,
                       QgsProject, QgsRasterLayer, QgsVectorLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterEnum,
                       QgsProcessingContext,
                       QgsFeatureRequest, QgsFeature,
                       QgsGeometry, QgsVectorLayer, QgsField, QgsPointXY,
                       QgsWkbTypes, QgsVectorFileWriter,
                       QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsProcessingUtils, QgsProcessingParameterField)


from qgis.PyQt.QtCore import QCoreApplication

try:
    from scipy import signal
except ModuleNotFoundError:
    import pip
    pip.main(['install', 'scipy'])
    from scipy import signal


try:
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier 
    from sklearn.metrics import roc_auc_score, mean_squared_error, accuracy_score

except: #ModuleNotFoundError:
    import pip
    pip.main(['install', 'scikit-learn'])
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier 
    from sklearn.metrics import roc_auc_score, mean_squared_error, accuracy_score    


from .helpers import ProcessingHelper
from .hazard.algorithm import RFForestAlgorithm


from PyQt5.QtCore import QVariant

import sys


# Constants used to refer to parameters and outputs. They will be
# used when calling the algorithm from another algorithm, or when
# calling from the QGIS console.
INPUT_MASK = 'INPUT_MASK'
INPUT_DEM = 'INPUT_DEM'
INPUT_VEG = 'INPUT_VEG'
INPUT_VEG_S = 'INPUT_VEG_S'
FIELD_LC = 'FIELD_LC'
VEG_CODE = 'VEG_CODE'  # input for Intensity 
INPUT_ROADS = 'INPUT_ROADS'
INPUT_FIRES = 'INPUT_FIRES'
OTHER_LAYERS = 'OTHER_LAYERS'
SAMPLE_TRAIN = 'SAMPLE_TRAIN'
MAX_DEPTH = 'MAX_DEPTH'
RISICO_CODE = 'RISICO_CODE'
FUEL_MODEL_CODE = 'FUEL_MODEL_CODE'
NFIRES = 'NFIRES'


#%%

class HazardAlgorithm(QgsProcessingAlgorithm):
    """
    It evalautes Wildifre susceptibility and intensity  map at national/regional scale.
    Then it evaluates the Risk combining exposed elements' potential degree of damages with intensity
    """


    def __get_default_value(self, substr):
        try:  # first layer name containing "dem"
            defaultValue = [
                layer.name()
                for layer in QgsProject.instance().mapLayers().values()
                if substr.lower() in layer.name().lower()
            ][0]
            return defaultValue
        except IndexError:
            return None


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_MASK,
                self.tr('Domain of study area'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_DEM,
                self.tr('DEM file'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('dem')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_VEG,
                self.tr('Land Cover file - RASTER'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine'),
                optional = True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_VEG_S,
                self.tr('Land Cover file - SHAPEFILE'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine'),
                optional = True,

            )
        )

        
        self.addParameter(
            QgsProcessingParameterField(
                FIELD_LC,
                self.tr('Name of field for rasterizing LC layer'),
                'code_18',
                INPUT_VEG_S,
                optional = True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_FIRES,
                self.tr('historical wildfire burned areas'),
                defaultValue=self.__get_default_value('fire')
            )
        )

        self.addParameter(
             QgsProcessingParameterNumber(
                NFIRES,
                self.tr('lenght of wildfire dataset (years)'),
                optional=False,
                defaultValue=15,
            )
        )

        self.addParameter(
             QgsProcessingParameterNumber(
                SAMPLE_TRAIN,
                self.tr('Insert a number (in percentage 0-100) for sampling the training dataset'),
                optional=True,
                defaultValue=100,
                minValue=1,
                maxValue=100
            )
        )
        
        self.addParameter(
             QgsProcessingParameterNumber(
                MAX_DEPTH,
                self.tr('Depth of random forest classsfier'),
                optional=True,
                defaultValue=100,
            )
        )

            
            
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                OTHER_LAYERS, 
                self.tr('Raster layers that will be used as features for the classifier'),
                layerType=QgsProcessing.TypeRaster,
                optional=True
            )
        )
        
        
        self.addParameter(
             QgsProcessingParameterFeatureSource(
                VEG_CODE,
                self.tr('excel file - vegetation classes to Fuel type'),
                defaultValue = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Excel_input_data', 'CORINE_to_FuelType.xlsx'),
                ))
        
        
        


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        if sys.stdout == None:
            sys.stdout = open('log.txt', 'w')
        
        if sys.stderr == None:
            sys.stderr = sys.stdout

        
        # load processing functions
        helper = ProcessingHelper(context, feedback)
        
        # dem raster file object
        dem = self.parameterAsRasterLayer(parameters, INPUT_DEM, context)  # this is a QgsRasterLayer object
        # open dem raster file using gdal
        dem_path = dem.dataProvider().dataSourceUri()
        dem_raster = gdal.Open(dem_path)
        # read file as array
        dem_arr = dem_raster.GetRasterBand(1).ReadAsArray()
        
        mask_domain_shp = self.parameterAsVectorLayer(parameters, INPUT_MASK, context)
        
        # in case user give a mask layer use it to update the reference raster (the dem)
        if mask_domain_shp != None:
            print('you have chosen a custom domain')
            mask_domain_raster = helper.clip_raster_by_mask(dem, mask_domain_shp, crop_ = True)
            mask_domain_raster_path = mask_domain_raster['OUTPUT']
            dem_raster = gdal.Open(mask_domain_raster_path)
            dem_arr = dem_raster.GetRasterBand(1).ReadAsArray()
            dem = QgsRasterLayer(mask_domain_raster_path, "new_dem")
            
            
        
        # calculate slope
        slope_layer = helper.calculate_slope(dem)
        slope_path, slope_raster, slope_arr = helper.read_arr_after_qgis_process(slope_layer)
                
        # aspect
        aspect_layer = helper.calculate_aspect(dem)
        aspect_path, aspect_raster, aspect_arr = helper.read_arr_after_qgis_process(aspect_layer)
        
        northing_arr = np.cos(aspect_arr * np.pi/180.0)
        easting_arr = np.sin(aspect_arr * np.pi/180.0)

               
        # read and rasterize fires
        fire_layer = self.parameterAsVectorLayer(parameters, INPUT_FIRES, context)   
        fire_raster_result = helper.rasterize_numerical_feature(fire_layer, dem, column=None, burn=0.0)
        fires_raster_path, fires_raster, fires_arr = helper.read_arr_after_qgis_process(fire_raster_result)
        
        other_layers = self.parameterAsLayerList(parameters, OTHER_LAYERS, context)
        other_layers_dict = {}
        for other_layer in other_layers:
            layer_name = other_layer.name()
            feedback.pushInfo(f'Reading {layer_name}')
            #reproject the optional input layer
            other_layer_repr = helper.reproject_layer(other_layer, dem)
            path_layer, layer_raster, layer_arr = helper.read_arr_after_qgis_process(other_layer_repr)
                   
            other_layers_dict[layer_name] = layer_arr
            
            

        # vegetation shapefile or raster file
        veg_0 = self.parameterAsRasterLayer(parameters, INPUT_VEG, context)
        if veg_0 == None:
            veg_0 = self.parameterAsVectorLayer(parameters, INPUT_VEG_S, context) 
            field_lc = self.parameterAsFields(parameters, FIELD_LC, context)[0]
            veg_0_result = helper.rasterize_numerical_feature(veg_0, dem, column=field_lc, burn=0.0)
            veg_path, veg_raster, veg_arr = helper.read_arr_after_qgis_process(veg_0_result)
            nodata = veg_raster.GetRasterBand(1).GetNoDataValue()
            print('veg rasterized:\n', np.unique(veg_arr))
        else:     
            vegr = helper.reproject_layer(veg_0, dem)
            veg_path, veg_raster, veg_arr = helper.read_arr_after_qgis_process(vegr)
            nodata = veg_raster.GetRasterBand(1).GetNoDataValue()


        
        # read file - veg to fuel type 
        path_excel = self.parameterAsString(parameters, VEG_CODE, context)
        excel = QgsVectorLayer(path_excel, 'codes', 'ogr')
        
        # extract veg code not burnable 
        nb_codes_list = list()
        for feature in excel.getFeatures():
            if feature['is_not_burnable'] == 'y':
                nb_codes_list.append(feature['veg'])
                
        nb_codes_list = [int(i) for i in nb_codes_list] 
        nb_codes_list = [str(i) for i in nb_codes_list] 
        
        # create a mask of vegetated areas
        band = dem_raster.GetRasterBand(1)
        dem_nodata = band.GetNoDataValue()

        percentage = self.parameterAsInt(parameters, SAMPLE_TRAIN, context)
        max_depth = self.parameterAsInt(parameters, MAX_DEPTH, context)

        
        # modelling Wf suscetibility
        algortihm = RFForestAlgorithm(context, feedback)
        X_all, Y_all, dem_arr, mask, columns = algortihm.preprocessing(dem_arr, 
                                                                       dem_nodata, 
                                                                       fires_arr, 
                                                                       veg_arr, 
                                                                       nb_codes_list, 
                                                                       slope_arr, 
                                                                       northing_arr, 
                                                                       easting_arr, 
                                                                       other_layers_dict
                                                                       )  
        
        model, X_train, X_test, y_train, y_test = algortihm.train(X_all, Y_all, percentage, max_depth)
        
        algortihm.print_stats(model, 
                              X_train, 
                              y_train, 
                              X_test, 
                              y_test, 
                              columns
                              )
        
        susc_arr = algortihm.get_results(model,
                                         X_all, 
                                         dem_arr, 
                                         dem_raster, 
                                         mask                                                        
                                         )
        # masking veg array
        veg_arr[~mask]= -9999

        
        
        # aggregate vegetation
        veg_arr = np.where(veg_arr < 0, 0, veg_arr)
        fuel_type_arr = helper.veg_aggregation(excel, veg_arr) 
        
        # define the susceptibility classes raster (1 to 3)
        quantiles = np.nanquantile(susc_arr[mask], [0.25, 0.75])                     
        susc_classes_arr = helper.susc_classes(susc_arr, quantiles)
        
        # contingency matrix susc-intensity for assessing the hazard
        hazard_arr = helper.hazard_matrix(susc_classes_arr, fuel_type_arr)
        hazard_arr_12cl = helper.hazard_matrix_V2(susc_classes_arr, fuel_type_arr)
        
        # folder download of the user for saving the files
        dowload_path =  os.path.expanduser(r"~\Downloads\Hazard_output")
        if not os.path.exists(dowload_path):
            os.mkdir(dowload_path)
        
        susc_p, susc_cl_p = os.path.join(dowload_path, 'susceptibility'), os.path.join(dowload_path, 'susceptibility_classes')
        ft_p, haz_p, haz12_p = os.path.join(dowload_path, 'fuel_type'), os.path.join(dowload_path, 'hazard'), os.path.join(dowload_path, 'hazard_12cl')
        
        helper.save_temporary_array(susc_arr, dem, susc_p)
        helper.save_temporary_array(susc_classes_arr, dem, susc_cl_p)
        helper.save_temporary_array(fuel_type_arr, dem, ft_p)
        helper.save_temporary_array(hazard_arr, dem, haz_p)
        helper.save_temporary_array(hazard_arr_12cl, dem, haz12_p)

        # finally, evelaute the layer of probability on the static map
        len_years = self.parameterAsInt(parameters, NFIRES, context)
        probabilities = helper.evalaute_probabilities(hazard_arr_12cl, fires_arr, len_years)
        prob_p = os.path.join(dowload_path, 'probabilities')
        helper.save_temporary_array(probabilities, dem, prob_p)

        results = {
        }
        
        feedback.pushInfo('Output saved in ./Downloads/Hazard_output')
        
        return results

    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Wildfire Hazard'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return HazardAlgorithm()
    
