# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RFForestFireRisk
                                 A QGIS plugin
 Forest Fire Risk analysis using Random Forest Algorith
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-04
        copyright            : (C) 2022 by CIMA Research Foundation
        email                : giorgio.meschi@cimafoundation.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CIMA Research Foundation'
__date__ = '2022-01-04'
__copyright__ = '(C) 2022 by CIMA Research Foundation'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from time import sleep

import numpy as np
import processing
from osgeo import gdal
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRange,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameters, QgsProcessingParameterString,
                       QgsProcessingParameterMultipleLayers,
                       QgsProject, QgsRasterLayer, QgsVectorLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterEnum,
                       QgsProcessingContext)

from qgis.PyQt.QtCore import QCoreApplication
from scipy import signal
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
        
from sklearn.metrics import roc_auc_score, mean_squared_error, accuracy_score

from .helpers import ProcessingHelper
from .algorithm import RFForestAlgorithm

from .processing_layer_risk import PreprocessingRiskInputs
from .risk_model import RiskEval

from PyQt5.QtCore import QVariant
from qgis.core import (QgsProcessing, QgsProject, QgsFeatureRequest, QgsFeature,
                       QgsGeometry, QgsVectorLayer, QgsField, QgsPointXY,
                       QgsWkbTypes, QgsVectorFileWriter,
                       QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsProcessingUtils
                       )



# Constants used to refer to parameters and outputs. They will be
# used when calling the algorithm from another algorithm, or when
# calling from the QGIS console.
OUTPUT_s = 'OUTPUT_s'
OUTPUT_i = 'OUTPUT_i'
OUTPUT_h = 'OUTPUT_h'
INPUT_DEM = 'INPUT_DEM'
INPUT_VEG = 'INPUT_VEG'
VEG_CODE = 'VEG_CODE'  # input for Intensity 
INPUT_ROADS = 'INPUT_ROADS'
INPUT_FIRES = 'INPUT_FIRES'
NON_BURNABLE_CODES = 'NON_BURNABLE_CODE'
OTHER_LAYERS = 'OTHER_LAYERS'
SAMPLE_TRAIN = 'SAMPLE_TRAIN'
PREDICATE = 'PREDICATE' #  used for checkbox
RISICO_CODE = 'RISICO_CODE'
# PHY_PARAM = 'PHY_PARAM'
FUEL_MODEL_CODE = 'FUEL_MODEL_CODE'

#%% risk inputs


INPUT_MASK = 'INPUT_MASK'

DO_RISK = 'DO_RISK' # if checked risk analysis will be performed

# native is from osm
META_E = 'META_E'
INPUT_POI = 'INPUT_POI'
INPUT_ROADS = 'INPUT_ROADS'
INPUT_TRANSPORT = 'INPUT_TRANSPORT'
INPUT_POP = 'INPUT_POP'

INPUT_haz = 'INPUT_haz'

OUTPUT_PDD = 'OUTPUT_PDD'
OUTPUT_PDD_CL = 'OUTPUT_PDD_CL'
OUTPUT_R = 'OUTPUT_R'

# LIST_SHP = ['alpine_huts', 'attractions', 'hospitals', 'instructions', 'shleters',
#             'theatres', 'stadium', 'police', 'embassy', 'graveyarsds', 'museums',
#             'hotels', 'huntings', 'transport']

LIST_SHP = ['alpine_huts', 'attractions']
OUT_SHP = 'OUT_SHP'



#%%

class RFForestFireRiskAlgorithm(QgsProcessingAlgorithm):
    """
    It evalautes Wildifre susceptibility, intensity and hazard map at national/regional scale.
    Then it evaluates the Risk combining exposed elements' potential degree of damages with hazards
    """


    def __get_default_value(self, substr):
        try:  # first layer name containing "dem"
            defaultValue = [
                layer.name()
                for layer in QgsProject.instance().mapLayers().values()
                if substr.lower() in layer.name().lower()
            ][0]
            return defaultValue
        except IndexError:
            return None


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_MASK,
                self.tr('Input layer - shapefile of your domain'),
                optional=True,
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_DEM,
                self.tr('Input layer (dem)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('dem')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_VEG,
                self.tr('Input layer (veg)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine')
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_haz,
                self.tr('Input layer (haz)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('haz')
            )
        )

        
        '''
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_FIRES,
                self.tr('Input layer (fires)'),
                defaultValue=self.__get_default_value('fire')
            )
        )

        
        self.addParameter(
             QgsProcessingParameterString(
                NON_BURNABLE_CODES,
                self.tr('Pass a list of not burnable land cover codes:' + \
                        'It must be separated with a comma (example for 3 codes: 128,129,160)'),
                defaultValue='0'
            )
        )

        self.addParameter(
             QgsProcessingParameterNumber(
                SAMPLE_TRAIN,
                self.tr('Insert a number (in percentage 0-100) for sampling the training dataset'),
                optional=True,
                defaultValue=100,
                minValue=1,
                maxValue=100
            )
        )
            
            
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                OTHER_LAYERS, 
                self.tr('Raster layers that will be used as features for the classifier'),
                layerType=QgsProcessing.TypeRaster,
                optional=True
            )
        )
        '''
        
        self.addParameter(
             QgsProcessingParameterFeatureSource(
                VEG_CODE,
                self.tr('excel file - vegetation class to Intensity')))
        
        self.addParameter(
             QgsProcessingParameterFeatureSource(
                FUEL_MODEL_CODE,
                self.tr('excel file - vegetation class to fuel models')))
                
        #RISK INPUTs
        
        self.box_selection = (
            ('Do Risk', self.tr('Do risk')),
            (('Do NOT do Risk', self.tr('Do NOT do Risk')))
            )

        box_selection_obj  = QgsProcessingParameterEnum(DO_RISK,
                                        self.tr('check the box for making the RISK map'),
                                        options = [p[1] for p in self.box_selection],
                                        allowMultiple = False,
                                        defaultValue = [0])
        box_selection_obj.setMetadata({'widget_wrapper': {
                                                'class': 'processing.gui.wrappers.EnumWidgetWrapper',
                                                'useCheckBoxes': True,
                                                'columns': 1}})                                
        self.addParameter(box_selection_obj)         
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                META_E,
                self.tr('csv of exposed element files metadata'),
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_POI,
                self.tr('Input layer - POI'),
            )
        )
        

        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_ROADS,
                self.tr('Input layer - ROADS'),
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_TRANSPORT,
                self.tr('Input layer - TRANSPORTS'),
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_POP,
                self.tr('Input layer - raster of population'),
                optional = True,
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                OUT_SHP,
                self.tr('output shape POI'),
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_R,
                self.tr('Output Risk')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_PDD,
                self.tr('Output PDD')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_PDD_CL,
                self.tr('Output PDD Classes')
            )
        )
        
        

        
        #%%
        '''
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_s,
                self.tr('Output Susceptibility map')
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_i,
                self.tr('Output Intensity map')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                OUTPUT_h,
                self.tr('Output Hazard map')
            )
        )
        
        '''

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        # load processing functions
        helper = ProcessingHelper(context, feedback)
        
        # dem raster file object
        dem = self.parameterAsRasterLayer(parameters, INPUT_DEM, context)  # this is a QgsRasterLayer object
        # open dem raster file using gdal
        dem_path = dem.dataProvider().dataSourceUri()
        dem_raster = gdal.Open(dem_path)
        # read file as array
        dem_arr = dem_raster.GetRasterBand(1).ReadAsArray()
        
        mask_domain_shp = self.parameterAsVectorLayer(parameters, INPUT_MASK, context)
        
        # in case user give a mask layer use it to update the reference raster (the dem)
        if mask_domain_shp != None:
            print('you have chosen a custom domain')
            mask_domain_raster = helper.clip_raster_by_mask(dem, mask_domain_shp, crop_ = True)
            mask_domain_raster_path = mask_domain_raster['OUTPUT']
            dem_raster = gdal.Open(mask_domain_raster_path)
            dem_arr = dem_raster.GetRasterBand(1).ReadAsArray()
            dem = QgsRasterLayer(mask_domain_raster_path, "new_dem")
            
            
        
        '''
        # slope and aspect
        
        # calculate slope
        slope_layer = helper.calculate_slope(dem)
        slope_path = slope_layer['OUTPUT']
        slope_raster = gdal.Open(slope_path)
        slope_arr = slope_raster.GetRasterBand(1).ReadAsArray()

        # open in qgis
        # slope_qgis_layer = QgsRasterLayer(slope_path, "s_l_o_p_e")
        # QgsProject.instance().addMapLayer(slope_qgis_layer)
        
        # aspect
        aspect_layer = helper.calculate_aspect(dem)
        aspect_path = aspect_layer['OUTPUT']
        aspect_raster = gdal.Open(aspect_path)
        aspect_arr = aspect_raster.GetRasterBand(1).ReadAsArray()
        northing_arr = np.cos(aspect_arr * np.pi/180.0)
        easting_arr = np.sin(aspect_arr * np.pi/180.0)

        # # ruggednessindex
        # ruggednessindex_layer = helper.calculate_ruggednessindex(dem)
        # ruggednessindex_path = ruggednessindex_layer['OUTPUT']
        # ruggednessindex_raster = gdal.Open(ruggednessindex_path)
        # ruggednessindex_arr = ruggednessindex_raster.GetRasterBand(1).ReadAsArray()
               
        # get shapefile path from qgis vector input object 
        fire_layer = self.parameterAsVectorLayer(parameters, INPUT_FIRES, context)   
        fire_raster_result = helper.rasterize_numerical_feature(fire_layer, dem, column=None, burn=0.0)
        fires_raster_path = fire_raster_result['OUTPUT']
        fires_raster = gdal.Open(fires_raster_path)
        fires_arr = fires_raster.GetRasterBand(1).ReadAsArray()

        other_layers = self.parameterAsLayerList(parameters, OTHER_LAYERS, context)
        other_layers_dict = {}
        for other_layer in other_layers:
            layer_name = other_layer.name()
            feedback.pushInfo(f'Reading {layer_name}')
            #reproject the optional input layer
            other_layer_repr = helper.reproject_layer(other_layer, dem)
            path_layer = other_layer_repr['OUTPUT']            
            layer_raster = gdal.Open(path_layer)
            # read file as array
            layer_arr = layer_raster.GetRasterBand(1).ReadAsArray()        
            other_layers_dict[layer_name] = layer_arr
            
        '''
        # vegetation is already a raster, open it
        veg_0 = self.parameterAsRasterLayer(parameters, INPUT_VEG, context)
        
        # veg reprojection
        veg = helper.reproject_layer(veg_0, dem)
        path_veg = veg['OUTPUT']
       
        veg_raster = gdal.Open(path_veg)
        # read file as array
        veg_arr = veg_raster.GetRasterBand(1).ReadAsArray()        
        
        '''
        # read a 'user defined array of strings' --> the not burnable codes.
        # the user gives a list of codes in this format: numeric_code1,numeric_code2,ecc 
        # without space and separated with comma
        nb_codes = self.parameterAsString(parameters, NON_BURNABLE_CODES, context)
        
        # manually create a list of strings from a unique string of codes (example '128,129')
        nb_codes_list = nb_codes.split(',')

        # create a mask of vegetated areas
        band = dem_raster.GetRasterBand(1)
        dem_nodata = band.GetNoDataValue()

        percentage = self.parameterAsInt(parameters, SAMPLE_TRAIN, context)
        susc_path = self.parameterAsOutputLayer(parameters, OUTPUT_s, context)
        
        # modelling Wf suscetibility
        algortihm = RFForestAlgorithm(context, feedback)
        X_all, Y_all, dem_arr, mask, columns = algortihm.preprocessing(dem_arr, 
                                                                       dem_nodata, 
                                                                       fires_arr, 
                                                                       veg_arr, 
                                                                       nb_codes_list, 
                                                                       slope_arr, 
                                                                       northing_arr, 
                                                                       easting_arr, 
                                                                       #ruggednessindex_arr, 
                                                                       other_layers_dict
                                                                       )       
        model, X_train, X_test, y_train, y_test = algortihm.train(X_all, Y_all, percentage)
        algortihm.print_stats(model, 
                              X_train, 
                              y_train, 
                              X_test, 
                              y_test, 
                              columns
                              )
        susc_arr, outp_susc_path = algortihm.get_results(model, 
                                                         X_all, 
                                                         dem_arr, 
                                                         dem_raster, 
                                                         mask, 
                                                         susc_path
                                                         )
        
        veg_arr[~mask]= -9999

        '''
        # intensity and hazard evaluation
                
        # aggregate vegetation
        path_excel = self.parameterAsString(parameters, VEG_CODE, context)
        excel = QgsVectorLayer(path_excel, 'codes', 'ogr')
        
        
        
        # dont use the slection of the 2 intensities anymore
        
        # intensity based only on vegetation type  
        # remove negative values from veg arr
        veg_arr = np.where(veg_arr < 0, 0, veg_arr)
        veg_arr_aggr = helper.veg_aggregation(excel, veg_arr) 
        
        print('INTENSITY CLASSES: ', np.unique(veg_arr_aggr))
        
        # clean file adding no data (0) if needed
        # veg_arr_aggr = np.where((veg_arr_aggr < 1) + (veg_arr_aggr > 5), 0, veg_arr_aggr)
        '''
        # save intensity as qgis raster layer
        intens_path = self.parameterAsOutputLayer(parameters, OUTPUT_i, context)
        helper.saverasternd(dem_raster, intens_path, veg_arr_aggr)  
        
        # define the susceptibility classes raster (1 to 3)
        quantiles = np.nanquantile(susc_arr[mask], [0.25, 0.75])  # old quantiles [0.3, 0.5, 0.8, 0.95]                   
        susc_classes_arr = helper.susc_classes(susc_arr, quantiles)
        
        
        # contingency matrix susc-intensity for assessing the hazard
        hazard_arr = helper.hazard_matrix(susc_classes_arr, veg_arr_aggr)
        
        
        haz_path = self.parameterAsOutputLayer(parameters, OUTPUT_h, context)
        helper.saverasternd(dem_raster, haz_path, hazard_arr)  
        '''
        # options = [self.predicates[i][0] for i in
        #                 self.parameterAsEnums(parameters, PREDICATE, context)]

        # if 'Empirical Intensity' in options:
                  
        #     # intensity based only on vegetation type  
        #     veg_arr_aggr = helper.veg_aggregation(excel, veg_arr) 
        #     # clean file adding no data (0) if needed
        #     veg_arr_aggr = np.where((veg_arr_aggr < 1) + (veg_arr_aggr > 5), 0, veg_arr_aggr)

        #     # save intensity as qgis raster layer
        #     intens_path = self.parameterAsOutputLayer(parameters, OUTPUT_i, context)
        #     helper.saverasternd(dem_raster, intens_path, veg_arr_aggr)  
            
        #     # define the susceptibility classes raster (1 to 3)
        #     quantiles = np.nanquantile(susc_arr[mask], [0.25, 0.75])  # old quantiles [0.3, 0.5, 0.8, 0.95]                   
        #     susc_classes_arr = helper.susc_classes(susc_arr, quantiles)
            
        #     # contingency matrix susc-intensity for assessing the hazard
        #     hazard_arr = helper.hazard_matrix(susc_classes_arr, veg_arr_aggr)
            
        #     haz_path = self.parameterAsOutputLayer(parameters, OUTPUT_h, context)
        #     helper.saverasternd(dem_raster, haz_path, hazard_arr)  
            
        # elif 'Physical Intensity' in options:
            
        #     # here excel contains veg codes associated with risico codes 
        #     # use same function for aggregating the veg for empirical intensity
        #     veg_arr_aggr = helper.veg_aggregation(excel, veg_arr) # risico  veg
        #     # need another input: the csv of physical parameters
        #     path_param_csv  = self.parameterAsString(parameters, PHY_PARAM, context)
        #     param_veg_risico_csv  = QgsVectorLayer(path_param_csv, 'codes', 'ogr')
            
        #     #evaluate the intensity
        #     pyh_intens_arr = helper.phy_intensity(dem_arr, slope_arr, veg_arr_aggr, param_veg_risico_csv)
        #     intens_path = self.parameterAsOutputLayer(parameters, OUTPUT_i, context)
        #     helper.saverasternd(dem_raster, intens_path, pyh_intens_arr)  
        
        #     # asses the hazard 
        #     hazard_arr = pyh_intens_arr*(0.5 + 0.5*susc_arr)
        #     haz_path = self.parameterAsOutputLayer(parameters, OUTPUT_h, context)
        #     helper.saverasternd(dem_raster, haz_path, hazard_arr)  
                       
        # else:
        #     self.feedback.pushInfo('unexpected selection: no options were chosen for  Intensity evaluation')
        #     pass
    
        results = {
            # 'OUTPUT_s': outp_susc_path,
            # 'OUTPUT_i': intens_path,
            # 'OUTPUT_h': haz_path,
        }
        
        #%% RISK
        

        
        # add button for doing the risk, seee if it is checked
        check_selection = [self.box_selection[i][0] for i in
                        self.parameterAsEnums(parameters, DO_RISK, context)]
        print('\nYOUR SELECTION\n')
        print(check_selection)

        if 'Do Risk' in check_selection:
        
            metadata_csv_filepath = self.parameterAsString(parameters, META_E, context)
            metadata_csv_file = QgsVectorLayer(metadata_csv_filepath, 'meta', 'ogr')
            crs = dem.crs().authid()
            print(crs)
            preprocess_exposure = PreprocessingRiskInputs(context, feedback, crs, metadata_csv_file)
            
            
            poi_layer = self.parameterAsVectorLayer(parameters, INPUT_POI, context)   
            roads_layer = self.parameterAsVectorLayer(parameters, INPUT_ROADS, context)   
            transport_layer = self.parameterAsVectorLayer(parameters, INPUT_TRANSPORT, context)   
            pop_layer = self.parameterAsRasterLayer(parameters, INPUT_POP, context)
    
            # retreive the atrrays for each exposed element
            print('processing POI')
            poi_arrs, POI_list = preprocess_exposure.preprocessing_poi(poi_layer, dem)
            print('processing ROADS')
            roads_arrs = preprocess_exposure.preprocessing_roads(roads_layer, dem)
            print('processing TRASNPORT')
            transport_arrs = preprocess_exposure.preprocessing_transports(transport_layer, dem)
            
            print('veg aggr')        
            path_excel_fuels = self.parameterAsString(parameters, FUEL_MODEL_CODE, context)
            excel = QgsVectorLayer(path_excel_fuels, 'fuel_models', 'ogr')
            fuel_models = helper.veg_aggregation(excel, veg_arr) # risico veg
            
            print('processing fules')
            fuel_arrs = preprocess_exposure.preprocessing_vegetation(fuel_models, dem)  
            
            print('processing POP')
            if pop_layer != None:
                pop_arrs = preprocess_exposure.preprocessing_population(pop_layer, dem)
            else:
                pop_arrs = [np.zeros_like(dem_arr)]
            
            # create a list of each array
            list_exposed_arrays = [poi_arrs, transport_arrs, roads_arrs, fuel_arrs, pop_arrs]
            
            # flatten the list of arrays - the order is fixed and each entry correspond to defined V and E value
            # vals can be found in RiskEval Class - list_exposure_vulnerabilities
            arrays = [item for sublist in list_exposed_arrays for item in sublist]
            
            #add urban interfce 
            print('doing urban interface')
            urb_arr_buffered = preprocess_exposure.evaluate_urban_interface(veg_arr)
            arrays.append(urb_arr_buffered)
            
            # load risk class 
            risk_model = RiskEval(context, feedback)
            
            # max sliding windows on itensity layer
            intens_max_filter = helper.max_sliding_windows(veg_arr_aggr, windows_size = (3,3)).astype(int) # actually veg_arr_aggr is the intensity  
            
            # use the values of E and V to retreive vulenrability * exposure maps (potential degree of Damage maps)
            Vs, Es = risk_model.list_exposure_vulnerabilities(arrays)
    
            # prepare the hazard for risk eleemnt specific and total risk 
            
            # process hazard for the risk matrix
            print('processing the hazard')
            haz = self.parameterAsRasterLayer(parameters, INPUT_haz, context)  # this is a QgsRasterLayer object
            hazr = helper.reproject_layer(haz, dem)
            hazp = hazr['OUTPUT']
            # open dem raster file using gdal
            # hazp = haz.dataProvider().dataSourceUri()
            hazras = gdal.Open(hazp)
            # read file as array
            hazard_arr = hazras.GetRasterBand(1).ReadAsArray()
        
            hazard_class = risk_model.process_hazards(hazard_arr)
            
    
            PDD_arrays = list()
            # out_list_shp_paths = list()
            list_poi_vector_layers = list()
            
            count = 0
            for array, V, E in zip(arrays, Vs, Es):
                
                # in the list of arrays, index 16 is the last treated as poi/linear - 
                # meaning after that I dont use the maximum value in sliding windows
                if count < risk_model.number_of_pois()[0]:
                    print(f'I am doing exposed {count}')
                    damage_degree_map = risk_model.evaluate_potential_damage(intens_max_filter, array, V, E)
                    
                    # here just for POI I retreive every shapefile with fileds updated
                    if count < risk_model.number_of_pois()[1]:
                        layer = POI_list[count]
                        # evaluate the risk asset specific
                        specific_risk_arr = risk_model.element_specific_risk(damage_degree_map, E, hazard_class)
                        # update a layer with damage values and risk class
                        shape0 = risk_model.assign_damage_to_shapefile(layer, damage_degree_map, dem, col_name = 'Damage')
                        shape = risk_model.assign_damage_to_shapefile(shape0, specific_risk_arr, dem, col_name = 'Risk')
                        shape = risk_model.assign_name_to_shapefile(shape, col_name = 'name', feature_name = LIST_SHP[count])
                        materialized_shape = helper.duplicate_point_layer(shape, crs = crs)
                        list_poi_vector_layers.append(materialized_shape)
                    
                    if count == risk_model.number_of_pois()[1]:
                        out_file = self.parameterAsOutputLayer(parameters, OUT_SHP, context)
                        # try to merge exposed element in a unique shapefile
                        out_shp_path = helper.merge_vector_layers(list_poi_vector_layers, crs, out_file)                    
    
                else:
                    print(f'I am doing exposed {count}')
                    damage_degree_map = risk_model.evaluate_potential_damage(veg_arr_aggr, array, V, E)
                
                PDD_arrays.append(damage_degree_map)
                
                count += 1
                
            # asses total damage
            PDD_tot = np.sum(PDD_arrays, axis=0)
            
            
            # classify total damage
            print('classifing the total damage array')
            PDD_CL = risk_model.classify_total_damage(PDD_tot)
    
            # clip outputs where dem exsits
            PDD_tot = np.where(dem_arr > -100, PDD_tot, -1)
            PDD_CL = np.where(dem_arr > -100, PDD_CL, 0)
    
    
            pdd_path = self.parameterAsOutputLayer(parameters, OUTPUT_PDD, context)
            helper.saverasternd(dem_raster, pdd_path, PDD_tot)  
            pddcl_path = self.parameterAsOutputLayer(parameters, OUTPUT_PDD_CL, context)
            helper.saverasternd(dem_raster, pddcl_path, PDD_CL)  
    
            
            # risk evalaution 
            print('evalauting tha risk')
            risk_arr = risk_model.risk_matrix(hazard_class, PDD_CL)
            risk_arr = np.where(dem_arr > -100, risk_arr, 0)
            
            risk_path = self.parameterAsOutputLayer(parameters, OUTPUT_R, context)
            helper.saverasternd(dem_raster, risk_path, risk_arr)  
            
            results.update({'OUTPUT_PDD': pdd_path,
                        'OUTPUT_PDD_CL': pddcl_path,
                        'OUTPUT_R': risk_path,
                        'OUT_SHP': out_shp_path,
                        })
        else:
            print('YOU DIDNT SELECTED RISK ANALYSIS CHECKBOX')

        
        return results

    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Wildfire Risk'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'ALPHA'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return RFForestFireRiskAlgorithm()
    
