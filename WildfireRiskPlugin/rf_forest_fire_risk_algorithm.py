# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RiskPlugin
                                 A QGIS plugin
 Forest Fire Risk analysis using Random Forest Algorith
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-04
        copyright            : (C) 2022 by CIMA Research Foundation
        email                : giorgio.meschi@cimafoundation.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CIMA Research Foundation'
__date__ = '2022-01-04'
__copyright__ = '(C) 2022 by CIMA Research Foundation'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from time import sleep

import numpy as np
import processing
from osgeo import gdal
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterRange,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameters, QgsProcessingParameterString,
                       QgsProcessingParameterMultipleLayers,
                       QgsProject, QgsRasterLayer, QgsVectorLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterEnum,
                       QgsProcessingContext,
                       QgsFeatureRequest, QgsFeature,
                       QgsGeometry, QgsVectorLayer, QgsField, QgsPointXY,
                       QgsWkbTypes, QgsVectorFileWriter,
                       QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsProcessingUtils, QgsProcessingParameterField,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterMatrix)


from qgis.PyQt.QtCore import QCoreApplication
from PyQt5.QtCore import QVariant

try:
    from scipy import signal
except ModuleNotFoundError:
    import pip
    pip.main(['install', 'scipy'])
    from scipy import signal



from .helpers import ProcessingHelper
from .risk.prepare_layer_risk import PrepareRiskInputs
from .risk.risk_model import RiskEval



INPUT_VEG = 'INPUT_VEG'
INPUT_MASK = 'INPUT_MASK'
INPUT_POP = 'INPUT_POP'
CONV = 'CONV'
INPUT_haz = 'INPUT_haz'
INPUT_URB = 'INPUT_URB'

DIR_PATH = 'DIR_PATH'
INPUT_TABLE = 'INPUT_TABLE'
INPUT_TABLE_ROADS = 'INPUT_TABLE_ROADS'
INPUT_TABLE_VEG = 'INPUT_TABLE_VEG'
OUT_DIR_PATH = 'OUT_DIR_PATH'


OUT_SHP = 'OUT_SHP'


#%%

class RiskAlgorithm(QgsProcessingAlgorithm):
    """
    start from intensity and hazard map at national/regional scale to evaluate the risk.
    this is done combining exposed elements' potential degree of damages with hazards
    """


    def __get_default_value(self, substr):
        try:  # first layer name containing "dem"
            defaultValue = [
                layer.name()
                for layer in QgsProject.instance().mapLayers().values()
                if substr.lower() in layer.name().lower()
            ][0]
            return defaultValue
        except IndexError:
            return None


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                INPUT_MASK,
                self.tr('Input layer - shapefile of your domain'),
                optional=True,
            )
        )

        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_VEG,
                self.tr('Input layer (veg raster)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('corine'),
                optional = True,
            )
        )
        
        

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_haz,
                self.tr('Input layer (Hazard)'),
                #[QgsProcessing.TypeRaster],
                defaultValue=self.__get_default_value('haz')
            )
        )

                
        
        self.addParameter(
              QgsProcessingParameterString(
                DIR_PATH,
                self.tr('directory path in which POI layers have been stored'),
                # defaultValue=r'C:\Users\Giorg\CIMA Dropbox\Giorgio Meschi\CIMA\progetti\IPA_FF_balcani\DATI\[2]_Assets\assets_albania\mix_processed_pois',
            )
        )
        
        self.addParameter(
              QgsProcessingParameterMatrix(
                INPUT_TABLE,
                self.tr('input table'),
                headers = ['file name', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'E', 'directory'],
                defaultValue = ['hospitals.shp', 0.1, 0.2, 0.4, 0.6, 0.7, 0.8, 100, 'temp_' + str(np.linspace(0,0,500)),
                                'schools.shp', 0.1, 0.2, 0.4, 0.6, 0.7, 0.8, 100, 'temp_' + str(np.linspace(0,0,500)),
                                'hotels.shp', 0.1, 0.2, 0.4, 0.6, 0.7, 0.8, 80, 'temp_' + str(np.linspace(0,0,500)),
                                'shelters.shp', 0.2, 0.4, 0.5, 0.7, 0.8, 1, 70, 'temp_' + str(np.linspace(0,0,500)),
                                'other.shp', 0.1, 0.2, 0.4, 0.6, 0.7, 0.8, 70, 'temp_' + str(np.linspace(0,0,500)),
                     
                    
                             ],
                
                ))
        
        self.addParameter(
              QgsProcessingParameterMatrix(
                INPUT_TABLE_ROADS,
                self.tr('input table roads'),
                headers = ['file name', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'E', 'directory'],
                defaultValue =[ 'primary.shp', 0.1, 0.3, 0.6, 0.8, 1, 1, 70, 'temp_' + str(np.linspace(0,0,500)),
                                'secondary.shp', 0.1, 0.3, 0.6, 0.8, 1, 1, 60, 'temp_' + str(np.linspace(0,0,500)),
                                'tertiary.shp', 0.1, 0.3, 0.6, 0.8, 1, 1, 50, 'temp_' + str(np.linspace(0,0,500)),
                    
                             
                             ]
                ))
        
        
        self.addParameter(
              QgsProcessingParameterMatrix(
                INPUT_TABLE_VEG,
                self.tr('input table vegetation'),
                headers = ['file name', 'V1', 'V2', 'V3', 'V4','V5','V6', 'E', 'directory'],
                defaultValue =[ 'fuel_model_code_23.tif', 0.1, 0.5, 1, 1, 1, 1, 80, 'temp_' + str(np.linspace(0,0,500)),
                               'fuel_model_code_32.tif', 0.1, 0.1, 0.1, 0.1, 0.5, 1, 90, 'temp_' + str(np.linspace(0,0,500)),
                               'fuel_model_code_34.tif', 0.1, 0.1, 0.5, 1, 1, 1, 90, 'temp_' + str(np.linspace(0,0,500)),
                               'fuel_model_code_37.tif', 0.1, 0.1, 0.1, 0.5, 1, 1, 60, 'temp_' + str(np.linspace(0,0,500)),                               
                                                
                             ]
                ))
        
        
        self.addParameter(
              QgsProcessingParameterString(
                OUT_DIR_PATH,
                self.tr('directory path for saving your main output'),
                # defaultValue=r"C:\Users\Giorg\CIMA Dropbox\Giorgio Meschi\CIMA\progetti\IPA_FF_balcani\DATI\[1]_RISK\risk_albania\vs2_plugin\esempi\layers_test2",
            )
        )
        
        
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_POP,
                self.tr('Input layer - raster of population'),
                optional = True,
            )
        )
        
        
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                INPUT_URB,
                self.tr('Input layer - raster of urban interface'),
                optional = True,
            )
        )
        
        
        self.box_selection = (
            ('Rescale', self.tr('Rescale')),
            (('Do Not Rescale', self.tr('Do Not Rescale'))
            ))
            

        box_selection_obj  = QgsProcessingParameterEnum(CONV,
                                        self.tr('set Rescale if you are passing a pop layer with 1 km resolution, otherwise Dont'),
                                        options = [p[1] for p in self.box_selection],
                                        allowMultiple = False,
                                        defaultValue = [0],
                                        optional = True)
        box_selection_obj.setMetadata({'widget_wrapper': {
                                                'class': 'processing.gui.wrappers.EnumWidgetWrapper',
                                                'useCheckBoxes': True,
                                                'columns': 1}})                                
        self.addParameter(box_selection_obj)         
        
        
        
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                OUT_SHP,
                self.tr('output shape POI'),
            )
        )

        


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        print('START\n\n\n\n\n\n')
        
        # load processing functions
        helper = ProcessingHelper(context, feedback)
                    
        mask_domain_shp = self.parameterAsVectorLayer(parameters, INPUT_MASK, context)
            
        hazr = self.parameterAsRasterLayer(parameters, INPUT_haz, context)  # this is a QgsRasterLayer object
        hazp = hazr.dataProvider().dataSourceUri()
        # haz proj must be the correct one       
        hazras = gdal.Open(hazp)
        # read file as array
        hazard_arr = hazras.GetRasterBand(1).ReadAsArray()  
        
        print('HAZARD CLASSES: ', np.unique(hazard_arr))
        

        # in case user give a mask layer use it to update the reference raster (the intensity)
        if mask_domain_shp != None:
            print('you have chosen a custom domain')
            mask_domain_raster = helper.clip_raster_by_mask(hazr, mask_domain_shp, crop_ = True)
            mask_domain_raster_path = mask_domain_raster['OUTPUT']
            hazras = gdal.Open(mask_domain_raster_path)
            hazard_arr = hazras.GetRasterBand(1).ReadAsArray()
            hazr = QgsRasterLayer(mask_domain_raster_path, "clipped_haz")
        
        # vegetation shapefile or raster file
        veg_0 = self.parameterAsRasterLayer(parameters, INPUT_VEG, context)
        vegr = helper.reproject_layer(veg_0, hazr)
        veg_path, veg_raster, veg_arr = helper.read_arr_after_qgis_process(vegr)
        nodata = veg_raster.GetRasterBand(1).GetNoDataValue()
        
        crs = hazr.crs().authid()
        print(crs)
        
        # load process and risk classes
        prepare_layers = PrepareRiskInputs(context, feedback, crs)
        risk_model = RiskEval(context, feedback)

        # print('processing hazard for risk..')
        # hazard_class = risk_model.process_hazards(hazard_arr)

        # Open POI info table
        exposed_table = self.parameterAsMatrix(parameters, INPUT_TABLE, context)
        dirpath = self.parameterAsFile(parameters, DIR_PATH, context) 
        out_dirpath = self.parameterAsFile(parameters, OUT_DIR_PATH, context)        

        # fixed parameters for POI input table
        cols = 9
        index_filename = 0
        index_dirpath = -1
        indexes_vulnerabilities = [1,2,3,4,5,6]
        index_exposure = 7
        
        poi_table, nrows = prepare_layers.read_exposed_table(exposed_table, dirpath,
                                                      cols, 
                                                      index_filename, 
                                                      index_dirpath)  
        
        # problem: when inserted in the table the path is cutted, thus I have put defaul string with a lot of charcaters..       
        print(dirpath)
        
        list_poi_layers_path, list_poi_layers, list_poi_V, list_poi_E = prepare_layers.create_lists_from_table(poi_table, nrows, 
                                                                                                index_dirpath, index_filename,
                                                                                                indexes_vulnerabilities, index_exposure)
                                                                    
        
    
        # max sliding windows on 'itensity' layer
        hazard_max_filter = helper.max_sliding_windows(hazard_arr, windows_size = (3,3)).astype(int)   

        
        PDD_arrays = list()
        list_poi_vector_layers = list()
    
        for name, poi_layer, V, E in zip(list_poi_layers_path, list_poi_layers, list_poi_V, list_poi_E):
            
            basename = os.path.basename(name)
            print(f'I am doing exposed element - {basename}')
            
            # reprojecting vector layer
            try:
                poi_layer = helper.reproject_vector_layer(poi_layer, prj = crs)
                
                print('reprojected')
                poi_arr, poi_centroid = prepare_layers.prepare_single_poi(poi_layer, hazr)
                damage_degree_map = risk_model.evaluate_potential_damage(hazard_max_filter, poi_arr, V, E)
                PDD_arrays.append(damage_degree_map)
                
                # in this new framework the risk is just a classification of the potential damage (because V derives from H)
                specific_risk_arr = risk_model.element_specific_risk(damage_degree_map)
                # update a layer with damage values and risk class
                shape0 = risk_model.assign_damage_to_shapefile(poi_layer, damage_degree_map, hazr, col_name = 'Damage')
                shape = risk_model.assign_damage_to_shapefile(shape0, specific_risk_arr, hazr, col_name = 'Risk')
                shape = risk_model.assign_name_to_shapefile(shape, col_name = 'name', feature_name = basename)
                materialized_shape = helper.duplicate_point_layer(shape, crs = crs)
                list_poi_vector_layers.append(materialized_shape)
            except:
                print('probably not a correct name for your poi file.')
            
        # now I merge the files in a single one
        # path if specified by user (directory + filename)
        out_file = self.parameterAsOutputLayer(parameters, OUT_SHP, context) 
        # default path - user can change directory in the input list
        complete_out_path = os.path.join(out_dirpath, 'POI_layer.shp')
        
        try:
            out_shp_path = helper.merge_vector_layers(list_poi_vector_layers, crs, out_file, complete_out_path)  
        except:
            print('actually no poi files are in place')
            out_shp_path = None                
        
        
        # here I start the other type of layers, namely roads and vegetation 
        # the population risk is a part from the total risk instead
        # to do that I need to load the data with 2 different tables
        
        # open the table for the roads
        _roads_table = self.parameterAsMatrix(parameters, INPUT_TABLE_ROADS, context)
        roads_table, nrows_roads = prepare_layers.read_exposed_table(_roads_table, dirpath,
                                                      cols, 
                                                      index_filename, 
                                                      index_dirpath)  
        
        list_roads_layers_path, list_roads_layers, list_roads_V, list_roads_E = prepare_layers.create_lists_from_table(roads_table, nrows_roads, 
                                                                                                                    index_dirpath, index_filename,
                                                                                                                    indexes_vulnerabilities, index_exposure)
        
        # with the roads 
        road_D_arr_list = list()
        for name, road_layer, V, E in zip(list_roads_layers_path, list_roads_layers, list_roads_V, list_roads_E):
            
            basename = os.path.basename(name)
            print(f'I am doing exposed element - {basename}')
            
            road_layer = helper.reproject_vector_layer(road_layer, prj = crs)

            road_arr = prepare_layers.prepare_single_linear_poly(road_layer, hazr)
            damage_degree_map = risk_model.evaluate_potential_damage(hazard_max_filter, road_arr, V, E)
            # saving road arrs in a custom list - it will be used to mask the total damage map, menaing if there is road nothig ellse could exists
            road_D_arr_list.append(damage_degree_map)
            PDD_arrays.append(damage_degree_map)
            out_path0 = os.path.join(out_dirpath, basename.split('.')[0] + '_damage')
            helper.save_temporary_array(damage_degree_map, hazr, out_path0)

            
            risk_array = risk_model.element_specific_risk(damage_degree_map) 
            out_path = os.path.join(out_dirpath, basename.split('.')[0] + '_risk')
            helper.save_temporary_array(risk_array, hazr, out_path)
            
            
        # open the table for the vegetation - here inclue also urban interface
        _veg_table = self.parameterAsMatrix(parameters, INPUT_TABLE_VEG, context)
        veg_table, nrows_veg = prepare_layers.read_exposed_table(_veg_table, dirpath,
                                                      cols, 
                                                      index_filename, 
                                                      index_dirpath)  
        
        
        list_veg_layers_path, list_veg_layers, list_veg_V, list_veg_E = prepare_layers.create_lists_from_table(veg_table, nrows_veg, 
                                                                                                                    index_dirpath, index_filename,
                                                                                                                    indexes_vulnerabilities, index_exposure,
                                                                                                                    geotiff = True)
        
        for name, veg_layer, V, E in zip(list_veg_layers_path, list_veg_layers, list_veg_V, list_veg_E):
            
            basename = os.path.basename(name)
            print(f'I am doing exposed element - {basename}')
            
            # reproj layer
            vegr = helper.reproject_layer(veg_layer, hazr)
            
            vegp, vegras, veget_arr = helper.read_arr_after_qgis_process(vegr)
            
            # here hazard is smoothed: each pixel take average value of about 400 meters so that we can see what there is in the surrondings. 
            smoothing_diameter_size = 6
            hazard_smoothed = helper.average_sliding_windows(hazard_arr, windows_size = smoothing_diameter_size)
            hazard_smoothed = np.round(hazard_smoothed)
            
            damage_degree_map = risk_model.evaluate_potential_damage(hazard_smoothed, veget_arr, V, E)
            PDD_arrays.append(damage_degree_map)
            out_path0 = os.path.join(out_dirpath, basename.split('.')[0] +'_damage')
            helper.save_temporary_array(damage_degree_map, hazr, out_path0)
            
            risk_array = risk_model.element_specific_risk(damage_degree_map)
            out_path = os.path.join(out_dirpath, basename.split('.')[0] +'_risk')
            helper.save_temporary_array(risk_array, hazr, out_path)
         
            
        # step in which no data take 0, otherwise there is a bug when overlapping differnt exposed elemnts
        PDD_arrays_correction = list()
        for arr in PDD_arrays:
            array = np.where(arr<0, 0, arr)
            PDD_arrays_correction.append(array)
        
        PDD_tot = np.sum(PDD_arrays_correction, axis = 0) 
                
        
        # classify total damage
        print('classifing the total damage array')
        PDD_CL = risk_model.classify_total_damage(PDD_tot)

        # clip outputs where hazrexsits
        PDD_tot = np.where(veg_arr != nodata, PDD_tot, -1)
        print('evalauting tha risk')
        risk_arr = np.where(hazard_arr == 0, 0, PDD_CL)

        
        # salvo tutti nascondendoli all utente
        name_pdd =  os.path.join(out_dirpath, 'PDD')
        name_risk = os.path.join(out_dirpath, 'RISK')
        helper.save_temporary_array(PDD_tot, hazr, name_pdd)
        helper.save_temporary_array(risk_arr, hazr, name_risk)

        # optional: the population risk
        check_selection = [self.box_selection[i][0] for i in
                        self.parameterAsEnums(parameters, CONV, context)]
        
        # evalaution on population, 4 classes depending on density vs hazard
        pop_layer = self.parameterAsRasterLayer(parameters, INPUT_POP, context)
        if pop_layer is not None:
            
            
            if 'Rescale' in check_selection:
                rescaling = True
                print('rescaling pop')
            else:
                rescaling = False
            
            pop_arr_cl = prepare_layers.prepare_population(pop_layer, 
                                                           hazr, 
                                                           conversion = rescaling)
            
            risk_pop = risk_model.risk_matrix(hazard_max_filter, pop_arr_cl)
            name_pop_risk = os.path.join(out_dirpath, 'POP')
            helper.save_temporary_array(risk_pop, hazr, name_pop_risk)
        
        
        # finally evalaution of the urban interface.
        urb_layer = self.parameterAsRasterLayer(parameters, INPUT_URB, context)
        if urb_layer is not None:
            urb = helper.reproject_layer(urb_layer, hazr)
            urb_path, urb_raster, urb_arr = helper.read_arr_after_qgis_process(urb)
            haz_process = np.where(hazard_arr == 0, 1, hazard_arr)
            hazard_max_filter2 = helper.max_sliding_windows(haz_process, windows_size = (3,3)).astype(int) # max filter including no data point in hazard
            urb_cl = np.where(urb_arr == 1, hazard_max_filter2, 0)
            name_urb_risk = os.path.join(out_dirpath, 'URB_risk')
            helper.save_temporary_array(urb_cl, hazr, name_urb_risk)
        
        
        
        results = {'OUT_SHP':out_shp_path} 
        print('DONE\n')
        
        return results    
        
       
        
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Wildfire Risk'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'BETA'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return RiskAlgorithm()
    
